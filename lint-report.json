[{"filePath":"/home/tarquin_stapa/fluxori/backend/src/config/firestore.config.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[581,584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[581,584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[716,719],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[716,719],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[833,836],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[833,836],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport {\n  Firestore,\n  DocumentReference,\n  Settings,\n  Timestamp,\n} from '@google-cloud/firestore';\n\nimport {\n  FirestoreEntity,\n  TypedCollectionReference,\n  FirestoreDataConverter,\n} from '../types/google-cloud.types';\n\n/**\n * Implements a type-safe converter for Firestore\n */\nclass FirestoreConverter<T extends FirestoreEntity>\n  implements FirestoreDataConverter<T>\n{\n  /**\n   * Convert a model object to Firestore data\n   */\n  toFirestore(modelObject: T): Record<string, any> {\n    return modelObject;\n  }\n\n  /**\n   * Convert Firestore document data to a typed model object\n   */\n  fromFirestore(snapshot: any): T {\n    const data = snapshot.data();\n\n    // Handle timestamp conversions\n    const converted: Record<string, any> = {\n      ...data,\n      id: snapshot.id,\n    };\n\n    // Convert Timestamp objects to JavaScript Date objects\n    if (data.createdAt instanceof Timestamp) {\n      converted.createdAt = data.createdAt.toDate();\n    }\n\n    if (data.updatedAt instanceof Timestamp) {\n      converted.updatedAt = data.updatedAt.toDate();\n    }\n\n    if (data.deletedAt instanceof Timestamp) {\n      converted.deletedAt = data.deletedAt.toDate();\n    }\n\n    return converted as T;\n  }\n}\n\n/**\n * Firestore Configuration Service\n *\n * This service provides configuration and connection to Google Cloud Firestore.\n */\n@Injectable()\nexport class FirestoreConfigService {\n  private readonly firestore: Firestore;\n  private readonly logger = new Logger(FirestoreConfigService.name);\n  private readonly collectionPrefix: string;\n  private readonly projectId: string;\n  private readonly region: string;\n\n  constructor(private configService: ConfigService) {\n    this.projectId = this.configService.get<string>('GCP_PROJECT_ID') || '';\n    this.region = this.configService.get<string>('GCP_REGION') || 'us-central1';\n    const databaseId = this.configService.get<string>(\n      'FIRESTORE_DATABASE_ID',\n      'fluxori-db',\n    );\n    this.collectionPrefix = this.configService.get<string>(\n      'FIRESTORE_COLLECTION_PREFIX',\n      '',\n    );\n\n    // Configure Firestore settings\n    const settings: Settings = {\n      projectId: this.projectId,\n      databaseId,\n      ignoreUndefinedProperties: true,\n    };\n\n    // Initialize Firestore client\n    this.firestore = new Firestore(settings);\n    this.logger.log(\n      `Initialized Firestore connection to project ${this.projectId}, database ${databaseId}, region ${this.region}`,\n    );\n  }\n\n  /**\n   * Get the Firestore client instance\n   */\n  getFirestore(): Firestore {\n    return this.firestore;\n  }\n\n  /**\n   * Get a Firestore collection with the correct prefix\n   * @param collectionName Base collection name\n   * @returns Firestore collection reference\n   */\n  getCollection<T extends FirestoreEntity>(\n    collectionName: string,\n  ): TypedCollectionReference<T> {\n    const fullCollectionName = this.collectionPrefix\n      ? `${this.collectionPrefix}_${collectionName}`\n      : collectionName;\n\n    // Use the converter for type safety\n    return this.firestore\n      .collection(fullCollectionName)\n      .withConverter(\n        new FirestoreConverter<T>(),\n      ) as TypedCollectionReference<T>;\n  }\n\n  /**\n   * Create a document reference\n   * @param collectionName Collection name\n   * @param documentId Document ID\n   * @returns Firestore document reference\n   */\n  getDocument<T extends FirestoreEntity>(\n    collectionName: string,\n    documentId: string,\n  ): DocumentReference<T> {\n    return this.getCollection<T>(collectionName).doc(documentId);\n  }\n\n  /**\n   * Generate a full collection name with prefix\n   * @param collectionName Base collection name\n   * @returns Full collection name with prefix\n   */\n  getCollectionName(collectionName: string): string {\n    return this.collectionPrefix\n      ? `${this.collectionPrefix}_${collectionName}`\n      : collectionName;\n  }\n\n  /**\n   * Get the GCP project ID\n   * @returns Project ID string\n   */\n  getProjectId(): string {\n    return this.projectId;\n  }\n\n  /**\n   * Get the GCP region\n   * @returns Region string\n   */\n  getRegion(): string {\n    return this.region;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/tarquin_stapa/fluxori/backend/src/config/validation.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tarquin_stapa/fluxori/backend/src/health/firestore-health.indicator.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Timestamp' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[592,595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[592,595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Firestore Health Indicator for NestJS\n *\n * Implements health check indicator for Firestore database connections\n */\n\nimport { Injectable, Logger } from '@nestjs/common';\nimport { HealthIndicatorResult, HealthIndicator } from '@nestjs/terminus';\n\nimport { Timestamp } from '@google-cloud/firestore';\n\nimport { FirestoreConfigService } from '../config/firestore.config';\nimport { isFirestoreTimestamp } from '../types/google-cloud.types';\n\n/**\n * For backwards compatibility with GCP health checks\n */\nexport interface HealthResult {\n  status: 'UP' | 'DOWN';\n  details?: Record<string, any>;\n  error?: string;\n}\n\n/**\n * Firestore Health Indicator\n *\n * Implements health checks for Firestore connection using GCP native patterns\n * Extends NestJS Terminus HealthIndicator for compatibility\n */\n@Injectable()\nexport class FirestoreHealthIndicator extends HealthIndicator {\n  private readonly logger = new Logger(FirestoreHealthIndicator.name);\n  private readonly testCollection = '_health_checks';\n\n  constructor(private readonly firestoreConfigService: FirestoreConfigService) {\n    super();\n  }\n\n  /**\n   * Basic health check for Firestore\n   * @param componentName Name of the component being checked\n   * @returns Health check result in Terminus format\n   */\n  async isHealthy(componentName: string): Promise<HealthIndicatorResult> {\n    try {\n      // Get Firestore instance\n      const db = this.firestoreConfigService.getFirestore();\n\n      // Ping Firestore with a trivial operation\n      await db.collection(this.testCollection).doc('ping').set({\n        timestamp: new Date(),\n        ping: true,\n      });\n\n      // Return result in NestJS Terminus format\n      return this.getStatus(componentName, true, {\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      const stackTrace = error instanceof Error ? error.stack : undefined;\n\n      this.logger.error(\n        `Firestore health check failed: ${errorMessage}`,\n        stackTrace,\n      );\n\n      // Return result in NestJS Terminus format\n      return this.getStatus(componentName, false, {\n        error: errorMessage,\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  /**\n   * Detailed health check for Firestore with additional metrics\n   * @param componentName Name of the component being checked\n   * @returns Health check result with details in Terminus format\n   */\n  async isHealthyWithDetails(\n    componentName: string,\n  ): Promise<HealthIndicatorResult> {\n    try {\n      const startTime = process.hrtime();\n\n      // Get Firestore instance\n      const db = this.firestoreConfigService.getFirestore();\n\n      // Use a health check collection for the test\n      const healthCollection = db.collection(this.testCollection);\n      const docRef = healthCollection.doc('ping');\n\n      // Write a document\n      await docRef.set({\n        timestamp: new Date(),\n        ping: true,\n      });\n\n      // Read the document\n      const doc = await docRef.get();\n      const docData = doc.data();\n\n      // Calculate operation time\n      const [seconds, nanoseconds] = process.hrtime(startTime);\n      const responseTime = seconds * 1000 + nanoseconds / 1000000;\n\n      // Format timestamp properly\n      let timestampString = 'unknown';\n      if (docData?.timestamp) {\n        if (isFirestoreTimestamp(docData.timestamp)) {\n          timestampString = docData.timestamp.toDate().toISOString();\n        } else if (docData.timestamp instanceof Date) {\n          timestampString = docData.timestamp.toISOString();\n        } else {\n          timestampString = String(docData.timestamp);\n        }\n      }\n\n      // Return result in NestJS Terminus format\n      return this.getStatus(componentName, true, {\n        responseTime: `${responseTime.toFixed(2)} ms`,\n        documentExists: doc.exists,\n        timestamp: timestampString,\n        region: this.firestoreConfigService.getRegion() || 'default',\n      });\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      const stackTrace = error instanceof Error ? error.stack : undefined;\n\n      this.logger.error(\n        `Firestore detailed health check failed: ${errorMessage}`,\n        stackTrace,\n      );\n\n      // Return result in NestJS Terminus format\n      return this.getStatus(componentName, false, {\n        error: errorMessage,\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/tarquin_stapa/fluxori/backend/src/health/health.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tarquin_stapa/fluxori/backend/src/health/health.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tarquin_stapa/fluxori/backend/src/shared/tokens.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tarquin_stapa/fluxori/backend/src/templates/firestore-module.template.ts","messages":[{"ruleId":null,"fatal":false,"severity":1,"message":"File ignored because of a matching ignore pattern. Use \"--no-ignore\" to override.","nodeType":null}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tarquin_stapa/fluxori/backend/src/templates/firestore-repository.template.ts","messages":[{"ruleId":null,"fatal":false,"severity":1,"message":"File ignored because of a matching ignore pattern. Use \"--no-ignore\" to override.","nodeType":null}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tarquin_stapa/fluxori/backend/src/test/app.e2e-spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/tarquin_stapa/fluxori/backend/src/types/google-cloud.types.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Firestore' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Query' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WriteBatch' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FieldValue' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Storage' is defined but never used.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[935,938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[935,938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2484,2487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2484,2487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2813,2816],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2813,2816],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2833,2836],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2833,2836],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2848,2851],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2848,2851],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2867,2870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2867,2870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3212,3215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3212,3215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4047,4050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4047,4050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":253,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4971,4974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4971,4974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":264,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5259,5262],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5259,5262],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":286,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5755,5758],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5755,5758],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Type definitions for Google Cloud services\n *\n * This file defines interfaces and types for Google Cloud services\n * used throughout the application.\n */\n\nimport {\n  Firestore,\n  CollectionReference,\n  DocumentReference,\n  DocumentData,\n  Query,\n  QueryDocumentSnapshot,\n  DocumentSnapshot,\n  WriteBatch,\n  Timestamp as FirestoreTimestamp,\n  OrderByDirection,\n  FieldValue,\n  Transaction,\n  CollectionGroup,\n} from '@google-cloud/firestore';\nimport { Severity } from '@google-cloud/logging';\nimport { Storage } from '@google-cloud/storage';\n\n// Re-export Firestore Timestamp for consistency\nexport { FirestoreTimestamp as Timestamp };\n\n/**\n * Base entity interface for Firestore documents\n */\nexport interface FirestoreEntity {\n  id: string;\n  createdAt: Date | FirestoreTimestamp;\n  updatedAt: Date | FirestoreTimestamp;\n  isDeleted: boolean;\n  deletedAt?: Date | FirestoreTimestamp | null;\n  version: number;\n  [key: string]: any;\n}\n\n/**\n * Tenant-aware entity interface\n */\nexport interface TenantEntity extends FirestoreEntity {\n  organizationId: string;\n  tenantId?: string;\n}\n\n/**\n * Type for typed collection references\n */\nexport type TypedCollectionReference<T> = CollectionReference<T>;\n\n/**\n * Type for typed collection group\n */\nexport type TypedCollectionGroup<T> = CollectionGroup<T>;\n\n/**\n * Type for typed document references\n */\nexport type TypedDocumentReference<T> = DocumentReference<T>;\n\n/**\n * Type for typed document snapshots\n */\nexport type TypedDocumentSnapshot<T> = DocumentSnapshot<T>;\n\n/**\n * Type for typed query document snapshots\n */\nexport type TypedQueryDocumentSnapshot<T> = QueryDocumentSnapshot<T>;\n\n/**\n * Interface for Firestore data converters\n */\nexport interface FirestoreDataConverter<T> {\n  toFirestore(modelObject: T | Partial<T>): DocumentData;\n  fromFirestore(snapshot: QueryDocumentSnapshot<DocumentData>): T;\n}\n\n/**\n * Result interface for batch write operations\n */\nexport interface FirestoreBatchWriteResult {\n  status: 'success' | 'partial' | 'error';\n  successCount: number;\n  errorCount: number;\n  writtenCount?: number;\n  errors?: Array<{\n    index: number;\n    id?: string;\n    error: Error;\n  }>;\n}\n\n/**\n * Query filter operator types\n */\nexport type QueryFilterOperator =\n  | '=='\n  | '!='\n  | '>'\n  | '>='\n  | '<'\n  | '<='\n  | 'array-contains'\n  | 'array-contains-any'\n  | 'in'\n  | 'not-in';\n\n/**\n * Query filter definition\n */\nexport interface QueryFilter {\n  field: string;\n  operator: QueryFilterOperator;\n  value: any;\n}\n\n/**\n * Query order direction\n */\nexport type QueryOrderDirection = OrderByDirection;\n\n/**\n * Query order definition\n */\nexport interface QueryOrder {\n  field: string;\n  direction?: QueryOrderDirection;\n}\n\n/**\n * Pagination options\n */\nexport interface PaginationOptions {\n  limit?: number;\n  offset?: number;\n  startAt?: any;\n  startAfter?: any;\n  endAt?: any;\n  endBefore?: any;\n  page?: number;\n  pageSize?: number;\n}\n\n/**\n * Query options for Firestore queries\n */\nexport interface QueryOptions {\n  filters?: QueryFilter[];\n  orderBy?: QueryOrder[];\n  pagination?: PaginationOptions;\n  includeDeleted?: boolean;\n  organizationId?: string;\n  tenantId?: string;\n  select?: string[];\n  cache?: boolean;\n  [key: string]: any; // Allow additional query parameters\n}\n\n/**\n * Options for transaction execution\n */\nexport interface TransactionExecutionOptions {\n  maxAttempts?: number;\n  readOnly?: boolean;\n  retryDelayMs?: number;\n  timeoutMs?: number;\n}\n\n/**\n * Transaction context for repository operations\n */\nexport interface TransactionContext {\n  transaction: Transaction;\n  options?: TransactionExecutionOptions;\n}\n\n/**\n * Logging severity types mapped from Google Cloud\n */\nexport type LogSeverity = keyof typeof Severity;\n\n/**\n * Storage interface for cloud storage operations\n */\nexport interface StorageOptions {\n  projectId?: string;\n  keyFilename?: string;\n}\n\n/**\n * Return type for file upload operations\n */\nexport interface FileUploadResult {\n  path: string;\n  url?: string;\n  size: number;\n  contentType: string;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Configuration for Cloud Scheduler\n */\nexport interface CloudSchedulerConfig {\n  projectId: string;\n  location: string;\n  timeZone?: string;\n}\n\n/**\n * Job definition for scheduled tasks\n */\nexport interface ScheduledJob {\n  name: string;\n  schedule: string; // cron expression\n  httpTarget: {\n    uri: string;\n    httpMethod: 'GET' | 'POST' | 'PUT' | 'DELETE';\n    headers?: Record<string, string>;\n    body?: string;\n  };\n  retryConfig?: {\n    retryCount?: number;\n    maxRetryDuration?: string;\n    minBackoffDuration?: string;\n    maxBackoffDuration?: string;\n    maxDoublings?: number;\n  };\n}\n\n/**\n * Paginated result interface\n */\nexport interface PaginatedResult<T> {\n  items: T[];\n  total: number;\n  page: number;\n  pageSize: number;\n  totalPages: number;\n  hasNext: boolean;\n  hasPrevious: boolean;\n  cursor?: string;\n}\n\n/**\n * Document type with typed data\n */\nexport interface FirestoreDocument<T = any> {\n  id: string;\n  ref: DocumentReference<T>;\n  data: T;\n  exists: boolean;\n  createTime?: FirestoreTimestamp;\n  updateTime?: FirestoreTimestamp;\n  readTime?: FirestoreTimestamp;\n}\n\n// Type guard to check if an object is a Firebase Timestamp\nexport function isFirestoreTimestamp(obj: any): obj is FirestoreTimestamp {\n  return (\n    obj &&\n    typeof obj === 'object' &&\n    'seconds' in obj &&\n    'nanoseconds' in obj &&\n    typeof obj.seconds === 'number' &&\n    typeof obj.nanoseconds === 'number'\n  );\n}\n\n/**\n * User interface representing Firebase authenticated user\n */\nexport interface User {\n  uid: string;\n  email: string;\n  emailVerified: boolean;\n  displayName?: string;\n  photoURL?: string;\n  organizationId?: string;\n  role?: string;\n  customClaims?: Record<string, any>;\n  metadata?: {\n    creationTime?: string;\n    lastSignInTime?: string;\n  };\n  disabled?: boolean;\n}\n","usedDeprecatedRules":[]}]
