{
  "React Client Component": {
    "prefix": "rcc",
    "body": [
      "'use client';",
      "",
      "import { ReactNode } from 'react';",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Props {",
      "  /** Component children */",
      "  children?: ReactNode;",
      "  ",
      "  /** Custom className */",
      "  className?: string;$0",
      "}",
      "",
      "/**",
      " * ${1:${TM_FILENAME_BASE}} component",
      " */",
      "export function ${1:${TM_FILENAME_BASE}}({",
      "  children,",
      "  className",
      "}: ${1:${TM_FILENAME_BASE}}Props) {",
      "  return (",
      "    <div className={className}>",
      "      {children}",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "React Client Component with TypeScript"
  },
  "React Server Component": {
    "prefix": "rsc",
    "body": [
      "import { ReactNode } from 'react';",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Props {",
      "  /** Component children */",
      "  children?: ReactNode;",
      "  ",
      "  /** Custom className */",
      "  className?: string;$0",
      "}",
      "",
      "/**",
      " * ${1:${TM_FILENAME_BASE}} component",
      " */",
      "export function ${1:${TM_FILENAME_BASE}}({",
      "  children,",
      "  className",
      "}: ${1:${TM_FILENAME_BASE}}Props) {",
      "  return (",
      "    <div className={className}>",
      "      {children}",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "React Server Component with TypeScript"
  },
  "React Client Component with State": {
    "prefix": "rccs",
    "body": [
      "'use client';",
      "",
      "import { ReactNode, useState } from 'react';",
      "import { Stack, Text, Button } from '@/lib/ui';",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Props {",
      "  /** Component children */",
      "  children?: ReactNode;",
      "  ",
      "  /** Custom className */",
      "  className?: string;",
      "  ",
      "  /** Initial value */",
      "  initialValue?: number;",
      "  ",
      "  /** On value change callback */",
      "  onValueChange?: (value: number) => void;$0",
      "}",
      "",
      "/**",
      " * ${1:${TM_FILENAME_BASE}} component",
      " */",
      "export function ${1:${TM_FILENAME_BASE}}({",
      "  children,",
      "  className,",
      "  initialValue = 0,",
      "  onValueChange",
      "}: ${1:${TM_FILENAME_BASE}}Props) {",
      "  const [value, setValue] = useState<number>(initialValue);",
      "  ",
      "  const handleIncrement = () => {",
      "    const newValue = value + 1;",
      "    setValue(newValue);",
      "    if (onValueChange) {",
      "      onValueChange(newValue);",
      "    }",
      "  };",
      "  ",
      "  return (",
      "    <Stack gap=\"md\" className={className}>",
      "      <Text fw={700}>Value: {value}</Text>",
      "      <Button onClick={handleIncrement}>Increment</Button>",
      "      {children}",
      "    </Stack>",
      "  );",
      "}"
    ],
    "description": "React Client Component with State and TypeScript"
  },
  "React TypeScript Interface": {
    "prefix": "interface",
    "body": [
      "interface ${1:Interface}Props {",
      "  /** ${2:Property description} */",
      "  ${3:property}${4:?}: ${5:type};$0",
      "}"
    ],
    "description": "React TypeScript Interface"
  },
  "Mantine Import": {
    "prefix": "uiimport",
    "body": [
      "import { ${1:Button, Text, Stack, Group} } from '@/lib/ui';"
    ],
    "description": "Import from UI library instead of directly from Mantine"
  },
  "React TypeScript Hook": {
    "prefix": "hook",
    "body": [
      "'use client';",
      "",
      "import { useState, useEffect, useCallback } from 'react';",
      "",
      "/**",
      " * Custom hook for ${1:description}",
      " */",
      "export function use${2:CustomHook}(${3:param}: ${4:type}): ${5:ReturnType} {",
      "  const [state, setState] = useState<${6:StateType}>(${7:initialState});",
      "  ",
      "  const handleChange = useCallback((${8:event}) => {",
      "    $0",
      "  }, []);",
      "  ",
      "  useEffect(() => {",
      "    // Effect logic",
      "    ",
      "    return () => {",
      "      // Cleanup logic",
      "    };",
      "  }, []);",
      "  ",
      "  return {",
      "    state,",
      "    handleChange",
      "  };",
      "}"
    ],
    "description": "React TypeScript Custom Hook"
  }
}